---
- name: Provision DigitalOcean Droplet Environment
  hosts: localhost
  connection: local
  become: true

  vars:
    repo_url: "https://github.com/GistWiz/cli.git"

  tasks:
    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
          - git
          - curl
          - tree
          - unzip
          - vim
        state: present

    - name: Download Redis Stack Server (https://download.redis.io/releases)
      get_url:
        url: "https://packages.redis.io/redis-stack/redis-stack-server-7.4.0-v1.rhel9.x86_64.tar.gz"
        dest: /tmp/redis-stack-server.tar.gz
        mode: '0644'

    - name: Create destination directory for Redis Stack
      file:
        path: /opt/redis
        state: directory
        mode: '0755'

    - name: Extract Redis Stack Server
      unarchive:
        src: /tmp/redis.gz
        dest: /opt/redis
        remote_src: yes
        extra_opts:
          - --strip-components=2

    - name: Ensure /opt/redis/bin is in PATH for root user
      lineinfile:
        path: /root/.bashrc
        line: 'export PATH=$PATH:/opt/redis/bin'
        create: yes
        state: present

    - name: Configure Redis Stack service
      copy:
        dest: /etc/systemd/system/redis.service
        content: |
          [Unit]
          Description=Redis Stack Server
          After=network.target

          [Service]
          ExecStart=/opt/redis/bin/redis-stack-server /opt/redis/etc/redis.conf
          Restart=always
          User=root
          Environment="PATH=/opt/redis/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Secure Redis configuration to bind only to localhost
      ansible.builtin.lineinfile:
        path: /opt/redis/etc/redis.conf
        regexp: '^#?bind .*'
        line: 'bind 127.0.0.1 ::1'
        state: present
        create: yes

    - name: Reload systemd to apply new service
      systemd:
        daemon_reload: yes

    - name: Ensure Redis configuration ensures data persistence
      ansible.builtin.blockinfile:
        path: /opt/redis/etc/redis.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK: Redis Data Persistence Configuration"
        block: |
          # -----------------------------------------
          # Enable RDB Snapshots (Recommended for Backups)
          # -----------------------------------------

          # Save the dataset every 5 minutes if at least 1 key has changed
          save 300 1

          # Save the dataset every 60 seconds if at least 100 keys have changed
          save 60 100

          # Save the dataset every 15 seconds if at least 10,000 keys have changed
          save 15 10000

          # Specify the location for the RDB file
          dbfilename dump.rdb
          dir /var/lib/redis

          # -----------------------------------------
          # Enable AOF Persistence (Recommended for Durability)
          # -----------------------------------------

          # Use Append-Only File persistence for more durability
          appendonly yes

          # Specify the name of the AOF file
          appendfilename "appendonly.aof"

          # Fsync policy for AOF:
          # always: Every write is synced to disk (slow but safest)
          # everysec: Fsync every second (default; good balance of safety and performance)
          # no: Let the OS handle syncing (fastest but can lose data)
          appendfsync everysec

          # Avoid rewriting the AOF file too frequently
          no-appendfsync-on-rewrite yes

          # Reduce AOF file size by rewriting it in the background
          auto-aof-rewrite-percentage 100
          auto-aof-rewrite-min-size 64mb

          # -----------------------------------------
          # General Configuration for Consistency
          # -----------------------------------------

          # Stop writing if there are RDB/AOF errors (prevents data corruption)
          stop-writes-on-bgsave-error yes

          # Enable Redis to act as a durable and crash-safe database
          rdbchecksum yes

    - name: Enable & restart Redis Stack service
      ansible.builtin.systemd:
        name: redis-stack.service
        enabled: true
        state: restarted

    - name: Apply UFW rules to restrict Redis access (optional)
      ansible.builtin.shell: |
        sudo ufw allow from 127.0.0.1 to any port 6379
        sudo ufw deny 6379
      args:
        executable: /bin/bash
      register: ufw_rules_output
      changed_when: "'Skipping' not in ufw_rules_output.stdout"

    - name: Install Bun JavaScript runtime
      ansible.builtin.shell: |
        export HOME=/root
        curl -fsSL https://bun.sh/install | bash
        echo 'export PATH="/root/.bun/bin:$PATH"' >> /root/.bashrc
        source /root/.bashrc
        which bun
        bun --version
      args:
        executable: /bin/bash
      register: bun_install_output
      changed_when: "'bun was installed successfully' in bun_install_output.stdout"

    - name: Verify Bun installation
      ansible.builtin.shell: |
        source /root/.bashrc
        which bun && bun --version
      args:
        executable: /bin/bash
      register: bun_verify_output
      failed_when: "'command not found' in bun_verify_output.stderr"

    - name: Clone the application repository
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: /opt/gistwiz
        version: "{{ branch | default('main') }}"
        force: yes

    - name: Install application dependencies using Bun
      ansible.builtin.shell: |
        source /root/.bashrc
        cd /opt/gistwiz
        bun install
      args:
        executable: /bin/bash

    - name: Setup GistWiz Environment Variables
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: "QUEUE_NAME_GISTS=gists"

    - name: Create a systemd service for the application
      ansible.builtin.copy:
        dest: /etc/systemd/system/gistwiz.service
        content: |
          [Unit]
          Description=GistWiz Server
          After=network.target

          [Service]
          ExecStart=/bin/bash -c '/root/.bun/bin/bun run src/cli.ts serve'
          WorkingDirectory=/opt/gistwiz
          Restart=always
          User=root
          EnvironmentFile=/etc/environment

          [Install]
          WantedBy=multi-user.target

    - name: Create a systemd service for the GistWiz worker
      ansible.builtin.copy:
        dest: /etc/systemd/system/gistwiz-worker.service
        content: |
          [Unit]
          Description=GistWiz Worker
          After=network.target

          [Service]
          ExecStart=/bin/bash -c '/root/.bun/bin/bun run src/cli.ts worker'
          WorkingDirectory=/opt/gistwiz
          Restart=always
          User=root
          EnvironmentFile=/etc/environment

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd and start services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - gistwiz.service
        - gistwiz-worker.service

    - name: Tag provision completion
      debug:
        msg: "Provisioning complete. GistWiz services are up and running with Bun configured!"